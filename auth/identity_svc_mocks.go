// Code generated by MockGen. DO NOT EDIT.
// Source: identity_svc.go

// Package auth is a generated GoMock package.
package auth

import (
	x509 "crypto/x509"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIdentityService is a mock of IdentityService interface
type MockIdentityService struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityServiceMockRecorder
}

// MockIdentityServiceMockRecorder is the mock recorder for MockIdentityService
type MockIdentityServiceMockRecorder struct {
	mock *MockIdentityService
}

// NewMockIdentityService creates a new mock instance
func NewMockIdentityService(ctrl *gomock.Controller) *MockIdentityService {
	mock := &MockIdentityService{ctrl: ctrl}
	mock.recorder = &MockIdentityServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIdentityService) EXPECT() *MockIdentityServiceMockRecorder {
	return m.recorder
}

// MspID mocks base method
func (m *MockIdentityService) MspID() (string, error) {
	ret := m.ctrl.Call(m, "MspID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MspID indicates an expected call of MspID
func (mr *MockIdentityServiceMockRecorder) MspID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MspID", reflect.TypeOf((*MockIdentityService)(nil).MspID))
}

// CreatorID mocks base method
func (m *MockIdentityService) CreatorID() (string, error) {
	ret := m.ctrl.Call(m, "CreatorID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatorID indicates an expected call of CreatorID
func (mr *MockIdentityServiceMockRecorder) CreatorID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatorID", reflect.TypeOf((*MockIdentityService)(nil).CreatorID))
}

// Cert mocks base method
func (m *MockIdentityService) Cert() (*x509.Certificate, error) {
	ret := m.ctrl.Call(m, "Cert")
	ret0, _ := ret[0].(*x509.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cert indicates an expected call of Cert
func (mr *MockIdentityServiceMockRecorder) Cert() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cert", reflect.TypeOf((*MockIdentityService)(nil).Cert))
}

// CertID mocks base method
func (m *MockIdentityService) CertID() (string, error) {
	ret := m.ctrl.Call(m, "CertID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CertID indicates an expected call of CertID
func (mr *MockIdentityServiceMockRecorder) CertID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertID", reflect.TypeOf((*MockIdentityService)(nil).CertID))
}

// GetAttribute mocks base method
func (m *MockIdentityService) GetAttribute(attrName string) (AttributeValue, error) {
	ret := m.ctrl.Call(m, "GetAttribute", attrName)
	ret0, _ := ret[0].(AttributeValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttribute indicates an expected call of GetAttribute
func (mr *MockIdentityServiceMockRecorder) GetAttribute(attrName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttribute", reflect.TypeOf((*MockIdentityService)(nil).GetAttribute), attrName)
}
