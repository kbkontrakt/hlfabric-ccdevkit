// Code generated by MockGen. DO NOT EDIT.
// Source: acl_rep.go

// Package auth is a generated GoMock package.
package auth

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockACLRepository is a mock of ACLRepository interface
type MockACLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockACLRepositoryMockRecorder
}

// MockACLRepositoryMockRecorder is the mock recorder for MockACLRepository
type MockACLRepositoryMockRecorder struct {
	mock *MockACLRepository
}

// NewMockACLRepository creates a new mock instance
func NewMockACLRepository(ctrl *gomock.Controller) *MockACLRepository {
	mock := &MockACLRepository{ctrl: ctrl}
	mock.recorder = &MockACLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockACLRepository) EXPECT() *MockACLRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockACLRepository) Get() (ACL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(ACL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockACLRepositoryMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockACLRepository)(nil).Get))
}

// Save mocks base method
func (m *MockACLRepository) Save(acl ACL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", acl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockACLRepositoryMockRecorder) Save(acl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockACLRepository)(nil).Save), acl)
}
